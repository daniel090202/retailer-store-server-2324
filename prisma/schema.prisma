// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id             Int      @id @default(autoincrement())
  email          String   @unique
  gender         Int
  age            Int
  phone          String   @unique
  address        Int
  position       Int
  hashedPassword String
  userName       String   @unique
  firstName      String
  middleName     String?
  lastName       String
  admin          Boolean  @default(false)
  active         Boolean  @default(false)
  archived       Boolean  @default(false)
  verified       Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  order        Order[]
  coupon       Coupon[]
  Notification Notification[]

  @@map("users")
}

model Product {
  id            Int      @id @default(autoincrement())
  UPC           String   @unique
  name          String
  brand         String
  forGender     Int
  category      Int[]
  originalPrice Int
  salePrice     Int
  unit          Int
  active        Boolean  @default(false)
  archived      Boolean  @default(false)
  verified      Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  productDetails ProductDetail[]

  @@map("products")
}

model ProductDetail {
  id               Int      @id @default(autoincrement())
  UPC              String
  SKU              String   @unique
  size             String
  color            String
  initialInventory Int
  minimumInventory Int
  maximumInventory Int
  remainInventory  Int
  soldQuantity     Int
  storageLocation  Int[]
  displayLocation  Int[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  product Product @relation(fields: [UPC], references: [UPC])

  @@map("productDetails")
}

model Customer {
  id           Int      @id @default(autoincrement())
  email        String
  gender       Int
  age          Int
  phone        String   @unique
  address      String
  customerName String
  accountLevel Int
  active       Boolean  @default(false)
  block        Boolean  @default(false)
  verified     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  order  Order[]
  coupon Coupon[]

  @@map("customers")
}

model Order {
  id                    Int      @id @default(autoincrement())
  customerPhone         String
  customerPayment       Int
  customerPaymentMethod Int
  counterID             String
  cashierUserName       String
  addedCoupons          String[]
  couponsAmount         Int
  totalExpense          Int
  totalAmount           Int
  totalDiscount         Int
  exchange              Int
  notes                 String
  paymentStatus         Int
  shipmentBarcode       String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  coupons      Coupon[]
  orderDetails OrderDetail[]

  user     User      @relation(fields: [cashierUserName], references: [userName])
  customer Customer  @relation(fields: [customerPhone], references: [phone])
  counter  Counter   @relation(fields: [counterID], references: [barcode])
  shipment Shipment? @relation(fields: [shipmentBarcode], references: [barcode])

  @@map("orders")
}

model OrderDetail {
  id                Int    @id @default(autoincrement())
  orderID           Int
  productSKU        String
  purchasedQuantity Int
  totalExpense      Int
  notes             String

  order Order @relation(fields: [orderID], references: [id])

  @@map("orderDetails")
}

model Coupon {
  id                 Int      @id @default(autoincrement())
  orderID            Int?
  barcode            String   @unique
  owner              String?
  discountPercentage Float
  usageStatus        Int
  createdBy          String
  expiredIn          DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  order    Order?    @relation(fields: [orderID], references: [id])
  customer Customer? @relation(fields: [owner], references: [phone])
  user     User      @relation(fields: [createdBy], references: [userName])

  @@map("coupons")
}

model Counter {
  id        Int      @id @default(autoincrement())
  barcode   String   @unique
  location  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("counters")
}

model Shipment {
  id                   Int      @id @default(autoincrement())
  barcode              String   @unique
  status               Int
  deliveredDestination String
  deliveryCompany      Int
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  orders Order[]

  @@map("shipments")
}

model Notification {
  id           Int      @id @default(autoincrement())
  title        String
  target       String
  degree       Int
  type         Int
  content      String
  createdBy    String
  hiddenStatus Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [createdBy], references: [userName])

  @@map("notifications")
}
